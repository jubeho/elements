nimTitle	elements	elements.html	module src/elements		0
nim	NonUniqueKeyException	elements.html#NonUniqueKeyException	object NonUniqueKeyException		8
nim	ParentNotFoundException	elements.html#ParentNotFoundException	object ParentNotFoundException		9
nim	ParentAlreadyExistsException	elements.html#ParentAlreadyExistsException	object ParentAlreadyExistsException		10
nim	ExcelReadError	elements.html#ExcelReadError	object ExcelReadError		11
nim	KeyNotInElementKeyVals	elements.html#KeyNotInElementKeyVals	object KeyNotInElementKeyVals		12
nim	ElementIdNotInElementBevy	elements.html#ElementIdNotInElementBevy	object ElementIdNotInElementBevy		13
nim	Element	elements.html#Element	type Element		16
nim	ElementBevy	elements.html#ElementBevy	type ElementBevy		26
nim	newElement	elements.html#newElement,string,string,string,seq[string],OrderedTable[string,seq[string]]	proc newElement(id, name, parent: string = ""; childs: seq[string] = @[]; keyvals: OrderedTable[\n    string, seq[string]] = initOrderedTable[string, seq[string]]()): Element		31
nim	newElementBevy	elements.html#newElementBevy,bool	proc newElementBevy(makeroot: bool = false): ElementBevy		36
nim	newElementBevy	elements.html#newElementBevy,Element	proc newElementBevy(elem: Element): ElementBevy		49
nim	newElementBevy	elements.html#newElementBevy,seq[Element]	proc newElementBevy(elements: seq[Element]): ElementBevy		55
nim	addElement	elements.html#addElement,ElementBevy,Element,bool	proc addElement(eb: ElementBevy; element: Element; checkParent: bool = true)		66
nim	addKeyVal	elements.html#addKeyVal,Element,string,string	proc addKeyVal(elem: Element; key, val: string)		87
nim	delElement	elements.html#delElement,ElementBevy,string	proc delElement(eb: var ElementBevy; elementId: string)		93
nim	getElement	elements.html#getElement,ElementBevy,int	proc getElement(eb: ElementBevy; idx: int): Element		119
nim	getElementlevel	elements.html#getElementlevel,ElementBevy,Element	proc getElementlevel(eb: ElementBevy; element: Element): int		122
nim	getElementlevel	elements.html#getElementlevel,ElementBevy,string	proc getElementlevel(eb: ElementBevy; elementid: string): int		138
nim	getRootElementidents	elements.html#getRootElementidents,ElementBevy	proc getRootElementidents(eb: ElementBevy): seq[tuple[id, name: string]]		141
nim	getSamelevelElementidents	elements.html#getSamelevelElementidents,ElementBevy,Element	proc getSamelevelElementidents(eb: ElementBevy; element: Element): seq[\n    tuple[id, name: string]]		147
nim	getSamelevelElementidents	elements.html#getSamelevelElementidents,ElementBevy,string	proc getSamelevelElementidents(eb: ElementBevy; elementid: string): seq[\n    tuple[id, name: string]]		155
nim	getElementidents	elements.html#getElementidents,ElementBevy,int	proc getElementidents(eb: ElementBevy; level: int): seq[tuple[id, name: string]]		158
nim	getChildElementidents	elements.html#getChildElementidents,ElementBevy,Element	proc getChildElementidents(eb: ElementBevy; node: Element): seq[\n    tuple[id, name: string]]		166
nim	getChildElementidents	elements.html#getChildElementidents,ElementBevy,string	proc getChildElementidents(eb: ElementBevy; elementid: string): seq[\n    tuple[id, name: string]]		171
nim	printTree	elements.html#printTree,ElementBevy,Element,string	proc printTree(eb: ElementBevy; elem: Element; indent: string): string		174
nim	printTree	elements.html#printTree,ElementBevy,string	proc printTree(eb: ElementBevy; indent: string): string		179
nim	validateValues	elements.html#validateValues,Element,string,string,proc(string,string)	proc validateValues(elem: Element; valKey, pattern: string;\n               validateProc: proc (value, pattern: string): bool): seq[\n    tuple[id, value: string]]		182
nim	validateValues	elements.html#validateValues,ElementBevy,string,string,proc(string,string)	proc validateValues(eb: ElementBevy; valKey, pattern: string;\n               validateProc: proc (value, pattern: string): bool): seq[\n    tuple[id, value: string]]		192
nim	editKeyVals	elements.html#editKeyVals,Element,string,string,proc(string,string)	proc editKeyVals(e: var Element; key: string; pattern: string;\n            editvalproc: proc (val, pattern: string): string)		201
nim	importCsv	elements.html#importCsv,string,char,int,int,int,int,bool	proc importCsv(fp: string; sep: char = ','; idCol: int = 0; nameCol: int = -1;\n          parentCol, childCol: int = -1; createOrigin: bool = false): ElementBevy		210
nim	makeSpreadsheet	elements.html#makeSpreadsheet,ElementBevy	proc makeSpreadsheet(eb: ElementBevy): seq[seq[string]]		307
nim	makeSpreadsheet	elements.html#makeSpreadsheet,ElementBevy,OrderedTable[string,tuple[string,bool]]	proc makeSpreadsheet(eb: ElementBevy; am: OrderedTable[string,\n    tuple[attrname: string, useEbKey: bool]]): seq[seq[string]]		336
nim	readKeyMap	elements.html#readKeyMap,string	proc readKeyMap(fp: string): OrderedTable[string,\n                                     tuple[attrname: string, useEbKey: bool]]		395
nimgrp	newelementbevy	elements.html#newElementBevy-procs-all	proc		36
nimgrp	getelementlevel	elements.html#getElementlevel-procs-all	proc		122
nimgrp	printtree	elements.html#printTree-procs-all	proc		174
nimgrp	makespreadsheet	elements.html#makeSpreadsheet-procs-all	proc		307
nimgrp	validatevalues	elements.html#validateValues-procs-all	proc		182
nimgrp	getchildelementidents	elements.html#getChildElementidents-procs-all	proc		166
nimgrp	getsamelevelelementidents	elements.html#getSamelevelElementidents-procs-all	proc		147
